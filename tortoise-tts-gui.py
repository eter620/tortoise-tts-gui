"""
under GPL-3.0 license

The purpose of this code is to provide a simple GUI interface for use with Tortoise-TTS 

The project came about because a friend wanted to make AI voices for his videos but he
thought the current TTS programs were too difficult for him to use. Also he didn't 
want to pay for a service.

This interface works with both the Cuda version and the CPU version without needing 
any alterations

Usage: This file is to be placed in the main directory(tortoise-tts-main) 
and ran with the cmd prompt: python tortoise-tts-gui.py  

"""


import warnings

import PySimpleGUI as sg


import torch
import torchaudio
import torch.nn as nn
import torch.nn.functional as F
import os
import IPython

from tortoise.api import TextToSpeech
from tortoise.utils.audio import load_audio, load_voice, load_voices


# initalize some variables 
VOICE_NAME = 'NONE' # the name of the folder containing the voice samples
SAVE_NAME = '' # name and path of the output audio file
current_dir = os.getcwd()
# changes the speed of generation and the quaility of the resulting voice
presets_list = ['ultra_fast', 'fast', 'standard', 'high_quality']

layout = [  [sg.Text('Enter text to convert to speech'),sg.Push(),sg.Text('Preset'),sg.Combo(presets_list, default_value=presets_list[1], key='-PRESET-',)],
            [sg.Multiline(s=(100,4), key='-TEXT-')],
            [sg.Button('Choose Voice'), sg.Text(VOICE_NAME, key='-VOICE-')],
            [sg.FileSaveAs(initial_folder=current_dir + '/output', key='-SAVE-', file_types=(('.WAV', '.wav'),)), sg.Text(SAVE_NAME, key='-SAVE-')],
            [sg.Button('Generate'), sg.Button('Cancel')] ]

# Create the Window
window = sg.Window('Text To Speech Generator', layout)

# Event Loop to process "events" and get the "values" of the inputs
while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Cancel': # if user closes window or clicks cancel
        break
        
    # tortoise-tts only accepts a folder name, not a directory to load voices
    # VOICE_NAME grabs the folder name from the end of the file path
    # tortoise-tts only checks the tortoise/voices directory 
    if event == 'Choose Voice':
        voice_dir = sg.popup_get_folder("Select Voice Folder From the tortoise/voices Directory", initial_folder=current_dir + r'/tortoise/voices',)
        if voice_dir != None:
            VOICE_NAME = voice_dir.split('/')[-1]
            window['-VOICE-'].update(VOICE_NAME)
        
    if event == 'Generate':
        if VOICE_NAME == 'NONE':
            sg.popup_ok("Please Choose a Voice")

        elif values['-SAVE-'] == '':
            sg.popup_ok("Please Enter a File Name")

        elif values['-TEXT-'] == '':
            sg.popup_ok("Please Enter Text to Convert to Speech")

        else:
            
            # supresses the warnings given by Tortoise-TTS. The end user doesn't need to know any of this
            # if the warnings are not suppressed then the progress bar will disappear off screen
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
               
                # to clear the previous console text generated by tortoise-tts to make it easier to see the progress bar
                os.system('cls')
                
                # redirects the console text to a pysimplegui window. It looks nicer imo
                # also it lets the user still see the progress bar if you compile this to an .exe program 
                sg.Print('Re-routing the stdout', do_not_reroute_stdout=False)
                print = sg.Print

                tts = TextToSpeech()

                text = values['-TEXT-']
                preset = values['-PRESET-']
                SAVE_NAME = values['-SAVE-']
                        
                voice_samples, conditioning_latents = load_voice(VOICE_NAME)
                gen = tts.tts_with_preset(text, voice_samples=voice_samples, conditioning_latents=conditioning_latents, 
                              preset=preset)
                torchaudio.save(SAVE_NAME, gen.squeeze(0).cpu(), 24000)
                IPython.display.Audio(SAVE_NAME)

                sg.popup_ok("Finished")

window.close()
